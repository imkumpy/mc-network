---
# Run command below to run playbook
# ansible-playbook --ask-vault-pass playbook.yml

- hosts: localhost
  vars_files:
    - 'vars/vault.yaml'

  pre_tasks:

  - name: Configure uid for docker_compose_generator
    command: id -u
    register: docker_compose_generator_uid
  - set_fact:
      docker_compose_generator_uid={{ docker_compose_generator_uid.stdout }}

  - name: Configure gid for docker_compose_generator
    command: id -g
    register: docker_compose_generator_gid
  - set_fact:
      docker_compose_generator_gid={{ docker_compose_generator_gid.stdout }}

  - name: Ensure container volume mount points are created
    file:
      path: "{{ docker_compose_generator_output_path }}/data/{{ item.service_name }}"
      state: directory
    loop: "{{ containers }}"
    loop_control:
      label: "{{ item.service_name }}"

  - name: Ensure luckperms directories are created
    file:
      path: "{{ docker_compose_generator_output_path }}/data/{{ item.service_name }}/plugins/LuckPerms"
      state: directory
    loop: "{{ containers }}"
    loop_control:
      label: "{{ item.service_name }}"
    when: item.environment[0] == 'TYPE=PAPER'

  - name: Ensure paper/spigot plugins directory is created
    file:
      path: "{{ docker_compose_generator_output_path }}/plugins"
      state: directory

  - name: Purge previous paper/spigot plugins from server directories
    shell: "rm {{ docker_compose_generator_output_path }}/data/{{ item.service_name }}/plugins/*.jar"
    loop: "{{ containers }}"
    loop_control:
      label: "{{ item.service_name }}"
    when: item.environment[0] == 'TYPE=PAPER'
    ignore_errors: yes

  - name: Ensure fabric config directory is created
    file:
      path: "{{ docker_compose_generator_output_path }}/data/{{ item.service_name }}/config"
      state: directory
    loop: "{{ containers }}"
    loop_control:
      label: "{{ item.service_name }}"
    when: item.environment[0] == 'TYPE=FABRIC'

  - name: Create fabric mods directory
    file:
      path: "{{ docker_compose_generator_output_path }}/fabric-mods"
      state: directory

  - name: Create waterfall plugins directory
    file:
      path: "{{ docker_compose_generator_output_path }}/bungee-plugins"
      state: directory

  roles:
    - role: ironicbadger.ansible_role_docker_compose_generator

# ACTUAL TASKS BEGIN HERE, TO INCLUDE COPYING CONFIG FILES AND TEMPLATES OVER
  tasks:
  - name: Copy paper/spigot plugins to remote directory (from local share)
    synchronize:
      src: /media/shared/misc/spigot-plugins/
      dest: "{{ docker_compose_generator_output_path }}/plugins"
      delete: yes

  - name: Copy fabric mods to remote directory (from local share)
    synchronize:
      src: /media/shared/misc/fabric-mods/
      dest: "{{ docker_compose_generator_output_path }}/fabric-mods"
      delete: yes

  - name: Configure spigot.yml on paper servers
    template:
      src: templates/spigot.yml.j2
      dest: "{{ docker_compose_generator_output_path }}/data/{{ item.service_name }}/spigot.yml"
      owner: "{{ docker_compose_generator_uid }}"
      group: "{{ docker_compose_generator_gid }}"
    loop: "{{ containers }}"
    loop_control:
      label: "{{ item.service_name }}"
    when: item.environment[0] == 'TYPE=PAPER'

  - name: Configure waterfall proxy
    template:
      src: templates/waterfall-config.yml.j2
      dest: "{{ docker_compose_generator_output_path }}/data/{{ item.service_name }}/config.yml"
      owner: "{{ docker_compose_generator_uid }}"
      group: "{{ docker_compose_generator_gid }}"
    loop: "{{ containers }}"
    loop_control:
      label: "{{ item.service_name }}"
    when: item.image == 'itzg/bungeecord'

  - name: Copy waterfall plugins to remote directory (from local share)
    synchronize:
      src: /media/shared/misc/bungee-plugins/
      dest: "{{ docker_compose_generator_output_path }}/bungee-plugins"
      delete: yes

  - name: Configure luckperms for the paper/spigot servers
    template:
      src: templates/luckperms-config.yml.j2
      dest: "{{ docker_compose_generator_output_path }}/data/{{ item.service_name }}/plugins/LuckPerms/config.yml"
      owner: "{{ docker_compose_generator_uid }}"
      group: "{{ docker_compose_generator_gid }}"
    loop: "{{ containers }}"
    loop_control:
      label: "{{ item.service_name }}"
    when: item.environment[0] == 'TYPE=PAPER'

  - name: Configure FabricProxy for the Fabric servers
    template:
      src: templates/FabricProxy.toml.j2
      dest: "{{ docker_compose_generator_output_path }}/data/{{ item.service_name }}/config/FabricProxy.toml"
      owner: "{{ docker_compose_generator_uid }}"
      group: "{{ docker_compose_generator_gid }}"
    loop: "{{ containers }}"
    loop_control:
      label: "{{ item.service_name }}"
    when: item.environment[0] == 'TYPE=FABRIC'

  - name: Copy over whitelist.json file to servers
    copy:
      src: /media/shared/misc/whitelist.json
      dest: "{{ docker_compose_generator_output_path }}/data/{{ item.service_name }}/whitelist.json"
      owner: "{{ docker_compose_generator_uid }}"
      group: "{{ docker_compose_generator_gid }}"
    loop: "{{ containers }}"
    loop_control:
      label: "{{ item.service_name }}"
    when: item.image == 'itzg/minecraft-server'

# Uncomment Below if you wish for server network to be started at end of playbook
#  - name: Start server network using docker-compose
#    community.general.docker_compose:
#      project_src: .
